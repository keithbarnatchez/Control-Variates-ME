# Plot the propensity scores with ggplot
ggplot(data.frame(ps_weights), aes(x=ps_weights)) +
geom_histogram(binwidth=0.05, fill='lightblue', color='black') +
labs(title='Distribution of Propensity Scores', x='Propensity Score', y='Frequency',
subtitle = 'Estimated P(Completed | Baseline Covariates)') +
theme_minimal()
# Plot the propensity scores with ggplot
psplot <- ggplot(data.frame(ps_weights), aes(x=ps_weights)) +
geom_histogram(binwidth=0.05, fill='lightblue', color='black') +
labs(title='Distribution of Propensity Scores', x='Propensity Score', y='Frequency',
subtitle = 'Estimated P(Completed | Baseline Covariates)') +
theme_minimal() ; psplot
ggsave(paste0('figures/psplot',fl_ext,trt_ext,'.pdf'), plot=psplot, width=6, height=4, units='in')
setwd("/Volumes/platform/ws/barnatchez/regimen-e")
# Plot the propensity scores with ggplot
psplot <- ggplot(data.frame(ps_weights), aes(x=ps_weights)) +
geom_histogram(binwidth=0.05, fill='lightblue', color='black') +
labs(title='Distribution of Propensity Scores', x='Propensity Score', y='Frequency',
subtitle = 'Estimated P(Completed | Baseline Covariates)') +
theme_minimal() ; psplot
ggsave(paste0('figures/psplot',fl_ext,trt_ext,'.pdf'), plot=psplot, width=6, height=4, units='in')
ipw_data_raw
ipw_data_raw <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_DTI_20240206_dummy.csv')
View(ipw_data_raw)
# 2) re-weight subjects by the inverse prob of loss-to-follow-up.
#
# We estimate
#         P(loss to follow up | baseline covariates)
# with a binary conditional random forest model, and use the estimate probs to
# construct visit-specific weights in the mixed models (note these will be
# roughly, but not perfectly, constant within subjects). See Section 6.5.8 of
# the OLE-E SAP for more details.
#-------------------------------------------------------------------------------
# Load necessary packages
rm(list=ls())
source('helper_functions.R') # includes custom functions used in this file
# Analysis set
analysis_set <- 'ERF' # Choices: 'ERF', 'FAS'
fl_ext <- analysis_set # output file extension depends on sample used
# Blinded vs. unblinded
# set unblinded to TRUE if using the unblinded data (not all have access to it).
unblinded <- FALSE # TOGGLE THIS TO = TRUE IF RUNNING ON UNBLINDED DATA
trt_ext <- ifelse(unblinded, '_real','') # will add a '_real' suffix to output if unblinded
ipw_data_raw <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_DTI_20240206_dummy.csv')
# Choose appropriate analysis set
if (analysis_set == 'ERF') {
ipw_data_raw <- ipw_data_raw %>% filter(EROFL=='Y')
}
# Do some minor cleaning
# 1) recode Y/N to 1/0 for all relevant vars, 2) recode some 2-level factors to 1/0,
# 3) select the vars outlined in SAP
ipw_data <- ipw_data_raw %>%
mutate(completed = as.numeric(DCP01RS=='COMPLETED')) %>%
mutate_if(is.character, as.factor) %>%
select(c(SITEID, completed, TRT01P, AAGE, SEX, RACE, ETHNIC, ESCORIAL, ALSLOC,
RILFL, EDVFL, RELFL, DELFS, BMIBL, NFLBL, ALSFRSBL,
SXBLDURM, SX2DX),starts_with('BL_'))
# First: probability for completers
ps_mod <- party::cforest(as.factor(completed) ~ ., data=ipw_data,
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
ps_weights <- do.call(rbind,predict(ps_mod, type='prob'))[,2]
# Plot the propensity scores with ggplot
psplot <- ggplot(data.frame(ps_weights), aes(x=ps_weights)) +
geom_histogram(binwidth=0.05, fill='lightblue', color='black') +
labs(title='Distribution of Propensity Scores', x='Propensity Score', y='Frequency',
subtitle = 'Estimated P(Completed | Baseline Covariates)') +
theme_minimal() ; psplot
ggsave(paste0('figures/psplot',fl_ext,trt_ext,'.pdf'), plot=psplot, width=6, height=4, units='in')
# Winsorize weights
ps_weights <- winsorize(1/ps_weights) # take reciprocal since we only have completers in outcome analysis
# Make a dataset with everything that needs to be merged in to the longitudinal data
# Center covariates that enter into mixed model (SAP requires this)
patient_vars <- ipw_data %>% select(completed,TRT01P, EDVFL, RILFL,
DELFS, SXBLDURM) %>%
mutate(ps_weights = ps_weights,
USUBJID = ipw_data_raw$USUBJID,
DTIDT=ipw_data_raw$DTIDT,) %>%
mutate(EDVFL=as.numeric(EDVFL=='Y'), # recode to 1/0
RILFL=as.numeric(RILFL=='Y')) %>%
mutate(across(c(EDVFL,RILFL,DELFS, SXBLDURM), ~ . - mean(.))) # add the weights to the dataset
View(patient_vars)
View(ipw_data_raw)
analysis_df <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_endpoint._20240206_dummy.csv')
View(analysis_df)
# Choose appropriate analysis set
if (analysis_set == 'ERF') {
analysis_df <- analysis_df %>% filter(EROFL=='Y')
}
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
3 < NA
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
View(analysis_data)
analysis_df <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_endpoint._20240206_dummy.csv')
View(analysis_df)
ofcheck <- analysis_df %>% filter(!is.na(DTIDT))
View(ofcheck)
ofcheck <- analysis_df %>% filter(DTI==1)
# Choose appropriate analysis set
if (analysis_set == 'ERF') {
analysis_df <- analysis_df %>% filter(EROFL=='Y')
}
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
View(analysis_data)
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY,DTIDY)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY,DTIDY, DTI)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
# Do some minor cleaning
# 1) recode Y/N to 1/0 for all relevant vars, 2) recode some 2-level factors to 1/0,
# 3) select the vars outlined in SAP
ipw_data <- ipw_data_raw %>%
mutate(completed = DTI) %>%
mutate_if(is.character, as.factor) %>%
select(c(SITEID, completed, TRT01P, AAGE, SEX, RACE, ETHNIC, ESCORIAL, ALSLOC,
RILFL, EDVFL, RELFL, DELFS, BMIBL, NFLBL, ALSFRSBL,
SXBLDURM, SX2DX),starts_with('BL_'))
# First: probability for completers
ps_mod <- party::cforest(as.factor(completed) ~ ., data=ipw_data,
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
ps_weights <- do.call(rbind,predict(ps_mod, type='prob'))[,2]
# Plot the propensity scores with ggplot
psplot <- ggplot(data.frame(ps_weights), aes(x=ps_weights)) +
geom_histogram(binwidth=0.05, fill='lightblue', color='black') +
labs(title='Distribution of Propensity Scores', x='Propensity Score', y='Frequency',
subtitle = 'Estimated P(Completed | Baseline Covariates)') +
theme_minimal() ; psplot
ggsave(paste0('figures/psplot',fl_ext,trt_ext,'.pdf'), plot=psplot, width=6, height=4, units='in')
# Winsorize weights
ps_weights <- winsorize(1/ps_weights) # take reciprocal since we only have completers in outcome analysis
# Make a dataset with everything that needs to be merged in to the longitudinal data
# Center covariates that enter into mixed model (SAP requires this)
patient_vars <- ipw_data %>% select(completed,TRT01P, EDVFL, RILFL,
DELFS, SXBLDURM) %>%
mutate(ps_weights = ps_weights,
USUBJID = ipw_data_raw$USUBJID,
DTIDT=ipw_data_raw$DTIDT,) %>%
mutate(EDVFL=as.numeric(EDVFL=='Y'), # recode to 1/0
RILFL=as.numeric(RILFL=='Y')) %>%
mutate(across(c(EDVFL,RILFL,DELFS, SXBLDURM), ~ . - mean(.))) # add the weights to the dataset
analysis_df <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_endpoint._20240206_dummy.csv')
ofcheck <- analysis_df %>% filter(DTI==1)
# Choose appropriate analysis set
if (analysis_set == 'ERF') {
analysis_df <- analysis_df %>% filter(EROFL=='Y')
}
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY,DTIDY, DTI)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
View(ipw_data_raw %>% filter(USUBJID=='704-900960'))
# Important: "censor" any observation occuring after a "dropout" date
# i.e. drop observations for patients after they initiated relyvrio
analysis_data <- analysis_data %>% filter(ADY <= DTIDY))
analysis_df <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_endpoint._20240206_dummy.csv')
ofcheck <- analysis_df %>% filter(DTI==1)
# Choose appropriate analysis set
if (analysis_set == 'ERF') {
analysis_df <- analysis_df %>% filter(EROFL=='Y')
}
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY,DTIDY, DTI)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
# Important: "censor" any observation occuring after a "dropout" date
# i.e. drop observations for patients after they initiated relyvrio
analysis_data <- analysis_data %>% filter(ADY <= DTIDY)
# Merge patient_vars (static) and analysis_df (longitudinal) on USUBJID
analysis_data <- analysis_df %>%
select(c(USUBJID, ADY, PARAMCD, AVAL, AVISIT, SRCSTUDY,DTIDY, DTI)) %>%
left_join(patient_vars, by='USUBJID') %>%
filter(ADY>=0) # remove pre-baseline visits
# AVAL encodes a measurement, and PARAMCD encodes the thing being measured. Within
# each value of AVISIT and USUBJID, reshape to wide format (all the other variables carry over)
id_cols <- names(analysis_data) %>% setdiff(c("PARAMCD", "AVAL"))
analysis_data <- analysis_data %>%
pivot_wider(id_cols = id_cols,
names_from = PARAMCD, values_from = AVAL,
values_fill = list(value = NA)) %>%
mutate(across(where(is.character), as.factor))  %>%
rename(TREATED = TRT01P)
# If DTIDY is missing, set it to Inf
analysis_data <- analysis_data %>% mutate(DTIDY = ifelse(is.na(DTIDY), Inf, DTIDY)) %>%
filter(ADY <= DTIDY)
View(analysis_data)
723-900994
View(analysis_df)
# Finally, for each value of AVISIT, normalize the weights to be divided by the
# mean weight for that visit across all observations
analysis_data <- analysis_data %>%
group_by(AVISIT) %>%
mutate(ps_weights_stable = ps_weights/mean(ps_weights)) %>%
ungroup()
N.rep<-1000
science<-matrix(nrow=N.rep,ncol=6)
observed<-matrix(nrow=N.rep,ncol=7)
colnames(science)<-c("Unit","Si(0)","Si(1)","Yi(0)","Yi(1)","Xi")
colnames(observed)<-c("Unit","Wi","Si(0)","Si(1)","Yi(0)","Yi(1)","Xi")
set.seed(27)
library(rlang)
library(purrr)
science[,1]<-1:N.rep
science[,2]<-1*rbernoulli(n=N.rep,p=0.5)
science[,3]<-1*rbernoulli(n=N.rep,p=0.5)
science[,6]<-rnorm(n=N.rep,mean=50,sd=10)
for(i in 1:N.rep)
{ if(science[i,2]==0){science[i,4]<-NA}
if(science[i,3]==0){science[i,5]<-NA}
if(science[i,2]==1){science[i,4]<-sample(x=c(0:48),size=1)}
if(science[i,3]==1){science[i,5]<-sample(x=c(0:48),size=1)}
}
head(science)
View(science)
observed[,1]<-1:N.rep
observed[,2]<-1*rbernoulli(n=N.rep,p=0.5)
observed[,7]<-science[,6]
for(i in 1:N.rep)
{
if(observed[i,2]==0){observed[i,3]<-science[i,2]
observed[i,5]<-science[i,4]}
if(observed[i,2]==1){observed[i,4]<-science[i,3]
observed[i,6]<-science[i,5]}
}
head(science)
head(observed)
sum(1*(observed[,2]==0 & observed[,3]==0))
sum(1*(observed[,2]==0 & observed[,3]==1))
sum(1*(observed[,2]==1 & observed[,4]==0))
sum(1*(observed[,2]==1 & observed[,4]==1))
head(science)
head(observed)
observed.control<-subset(observed,observed[,2]==0)
observed.treated<-subset(observed,observed[,2]==1)
dim(observed.treated)
logistic.control<-glm(observed.control[,3]~observed.control[,7],family="binomial")
ipw_data_raw <- read.csv('../../lai/RGE inverse probability weighted analysis/IPW_DTI_20240206_dummy.csv')
View(ipw_data_raw)
ipw_data_raw$TRICALS
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=ipw_data %>% filter(TRT01P==1),
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=(ipw_data %>% filter(TRT01P==1)),
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=(ipw_data[TRT01P==1],
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=ipw_data[TRT01P==1],
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=ipw_data[ipw_data$TRT01P==1,],
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=ipw_data,
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
View(ipw_data)
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=ipw_data %>% filter(TRT01P=='Trehalose'),
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
# For Eric: Make a that includes predicted probs of completion for treated/untreated
ps_mod_treated <- party::cforest(as.factor(completed) ~ ., data=(ipw_data %>% filter(TRT01P=='Trehalose')),
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
ps_mod_control <- party::cforest(as.factor(completed) ~ ., data=(ipw_data %>% filter(TRT01P=='Placebo')),
controls = cforest_unbiased(ntree = 100, mtry = 5, maxdepth = 5))
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
setwd("/Volumes/platform/ws/barnatchez/regimen-e")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
mixed_model
contrast
# Now estimate contrasts
emm <- emmeans::emmeans(mixed_model, ~ TREATED*AVISIT, weights = ps_weights_stable)
contrast <- contrast(emm, method = "trt.vs.ctrl", simple = "each")
# Now estimate contrasts
emm <- emmeans::emmeans(mixed_model, ~ TREATED*AVISIT, weights = analysis_data$ps_weights_stable)
# Now estimate contrasts
emm <- emmeans::emmeans(mixed_model, ~ TREATED*AVISIT)
contrast <- contrast(emm, method = "trt.vs.ctrl", simple = "each")
emm
setwd("/Volumes/platform/ws/barnatchez/regimen-e")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
View(ipw_data_raw)
ipw_data_raw <- ipw_data_raw %>% filter(EROFL=='Y')
mean(ipw_data_raw$DTI)
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
View(analysis_data)
mixed_model_svc <- lm(PPOSVC ~ TREATED + # (gamma_1)
AVISIT + # (gamma_2,j)
SXBLDURM + DELFS + EDVFL + RILFL + # (gamma_3)
TREATED:AVISIT + # (gamma_4,j) +
AVISIT:SXBLDURM + AVISIT:DELFS + AVISIT:EDVFL + AVISIT:RILFL,
data=analysis_data, weights = ps_weights_stable # (gamma_5,j)
)
mixed_model_svc <- lme4::lmer(PPOSVC ~ (1 | SRCSTUDY) + # random intercept
TREATED + # (gamma_1)
AVISIT + # (gamma_2,j)
SXBLDURM + DELFS + EDVFL + RILFL + # (gamma_3)
TREATED:AVISIT + # (gamma_4,j) +
AVISIT:SXBLDURM + AVISIT:DELFS + AVISIT:EDVFL + AVISIT:RILFL,  # (gamma_5,j)
data = analysis_data, weights = ps_weights_stable
)
mxied_model_svc
mixed_model_svc
# Do some minor cleaning
# 1) recode Y/N to 1/0 for all relevant vars, 2) recode some 2-level factors to 1/0,
# 3) select the vars outlined in SAP
ipw_data <- ipw_data_raw %>%
mutate(completed = 1-DTI) %>%
mutate_if(is.character, as.factor) %>%
select(c(SITEID, completed, TRT01P, AAGE, SEX, RACE, ETHNIC, ESCORIAL, ALSLOC,
RILFL, EDVFL, RELFL, DELFS, BMIBL, NFLBL, TRICALS,ALSFRSBL,
SXBLDURM, SX2DX),starts_with('BL_'))
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
source("/Volumes/platform/ws/barnatchez/regimen-e/regimen-e-ipw.R")
install.packages('data.table')
install.packages("data.table")
#| label: example-code
library(data.table)
library(tidyverse)
#| label: example-code
library(data.table)
library(tidyverse)
set.seed(11249)
renv::status()
renv::init()
tinytex::install_tinytex()
tinytex::install_tinytex()
getwd()
setwd('research')
setwd('Documents.research')
setwd('Documents/research')
getwd()
setwd('control-variates')
dir()
path <- 'sim_results/sim_results_2023-07-13_10-53-59.csv'
res <- read.csv(path)
new_res <- c('sim_results/sim_results_2023-10-05_23-54-54.591595.csv',
'sim_results/sim_results_2023-10-05_23-54-58.705873.csv',
'sim_results/sim_results_2023-10-05_23-55-18.830387.csv',
'sim_results/sim_results_2023-10-05_23-55-18.853304.csv',
'sim_results/sim_results_2023-10-05_23-55-28.450882.csv',
'sim_results/sim_results_2023-10-05_23-55-28.494278.csv',
'sim_results/sim_results_2023-10-05_23-55-37.061791.csv',
'sim_results/sim_results_2023-10-05_23-55-42.566536.csv')
for (r in 1:length(new_res)) {
tmp <- read.csv(new_res[r])
res <- rbind(res, tmp)
}
res <- res %>% mutate(cicovmime = 1-as.numeric( cilowmime>1 | cihimime<1  ),
cicovtilde = 1-as.numeric( cilowtilde>1 | cihitilde<1  ),
cicovoracle = 1-as.numeric( ciloworacle>1 | cihioracle<1  ),
cicovcvgen = 1-as.numeric( cilowcvgen>1 | cihicvgen<1  ))
library(tidyverse)
res <- res %>% mutate(cicovmime = 1-as.numeric( cilowmime>1 | cihimime<1  ),
cicovtilde = 1-as.numeric( cilowtilde>1 | cihitilde<1  ),
cicovoracle = 1-as.numeric( ciloworacle>1 | cihioracle<1  ),
cicovcvgen = 1-as.numeric( cilowcvgen>1 | cihicvgen<1  ))
# Get long form of results for ATE estimates
res_long <- res %>% select(-matches('^var1')) %>%
pivot_longer(cols = starts_with('tau1'),
names_to = 'method',
values_to = 'tau_est') %>%
mutate(method=case_when(method == 'tau1mime' ~ 'MIME',
method == 'tau1hat' ~ 'Val. data only',
method == 'tau1tilde' ~ 'C.V.',
method == 'tau1oracle' ~ 'Oracle',
method == 'tau1naive' ~ 'Naive',
method == 'tau1mimeunc' ~ 'MIME Unc.',
method == 'tau1cvgen' ~ 'C.V. Gen.')) %>%
filter(!(method %in% c('MIME Unc.', 'C.V.')) )
res_long_cov <- res %>% select(-matches('^var1')) %>%
select(-matches('^tau1')) %>%
pivot_longer(cols = starts_with('cicov'),
names_to = 'method',
values_to = 'ci_coverage') %>%
mutate(method=case_when(method == 'cicovmime' ~ 'MIME',
method == 'cicovoracle' ~ 'Oracle',
method == 'cicovtilde' ~ 'C.V.',
method == 'cicovcvgen' ~ 'C.V. Gen.')) %>%
filter(!(method %in% c('MIME Unc.', 'C.V.')) )
ofg <- res_long %>% filter(n==5000,sens==0.8,is.na(etas1))
res_long %>% filter(n==5000,rho==0.2) %>% ggplot(aes(x=as.factor(method),y=tau_est,
fill=as.factor(method))) + geom_violin() +
geom_hline(yintercept = 1,color='salmon') +
facet_wrap(~as.factor(sens),ncol=2) + theme_bw() +
theme(legend.position = 'bottom') + theme_bw() +
labs(title='Varying sensitivity',
subtitle = 'Specificity fixed at 0.95',
y='ATE estimate',
x='Method') +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = 'none')
grp_vec <- c('method','sens','n','rho','etas1')
# First, for tmt effect estimates
res_summ <- res_long %>% group_by(across(all_of(grp_vec))) %>%
summarize(per_bias = mean(100*(tau_est-1)),
rmse = sqrt(mean( (tau_est-1)^2 ) ) ) %>%
mutate(val_nonr = ifelse(is.na(etas1),'S completely random', 'S depends on X'),
rho_desc = paste('rho =',rho)) %>%
pivot_longer(cols=c(per_bias,rmse),names_to='outcome',values_to='value')
# Next, for ci coverage
res_summ_cov <- res_long_cov %>% group_by(across(all_of(grp_vec))) %>%
summarize(cov_rate = mean(100*ci_coverage,na.rm=T)) %>%
mutate(val_nonr = ifelse(is.na(etas1),'S completely random', 'S depends on X'),
rho_desc = paste('rho =',rho)) %>%
pivot_longer(cols=c(cov_rate),names_to='outcome',values_to='value')
res_sum %>%  filter(n==5000,sens==0.95,is.na(etas1),outcome=='RMSE',
method %in% c('C.V.','Oracle','Val. data only')) %>%
ggplot(aes(x=rho,y=value, group=method, color=method)) + geom_line(size=0.7) +
theme_bw() + ylim(0,0.12) +
theme(legend.position = 'bottom') +
labs(x='Relative size of validation data',
y='RMSE',
title='Performance of proposed estimator',
subtitle='Varying the relative size of the validation data')
res_summ %>%  filter(n==5000,sens==0.95,is.na(etas1),outcome=='RMSE',
method %in% c('C.V.','Oracle','Val. data only')) %>%
ggplot(aes(x=rho,y=value, group=method, color=method)) + geom_line(size=0.7) +
theme_bw() + ylim(0,0.12) +
theme(legend.position = 'bottom') +
labs(x='Relative size of validation data',
y='RMSE',
title='Performance of proposed estimator',
subtitle='Varying the relative size of the validation data')
res_sum <- rbind(res_summ, res_summ_cov) %>%
mutate(outcome=recode(outcome,'rmse'='RMSE','per_bias'='% Bias','cov_rate'='95% C.I. cov.')) %>%
filter(!( (outcome=='RMSE') & (method %in% c('Val. data only')) & !(is.na(etas1)) ) ) %>%
filter(!( (outcome=='RMSE') & (method %in% c('Naive'))  ) ) %>%
mutate(method=replace(method,method=='C.V. Gen.', 'C.V.'))
# Make grid plot for outcomes under random S
bias_plot <- res_sum %>% filter(n==5000,etas1==0.1) %>% ggplot(aes(x=(1-sens),y=value,group=as.factor(method),
color=as.factor(method))) +
geom_point() + geom_line() + facet_grid(outcome ~ as.factor(rho_desc),scales='free') +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size=10,angle=45,hjust=1)) +
labs(title='Validation data obtained condititionally at random',
x='1-Sensitivity',
y='Operating characteristics',
color='') ; bias_plot
